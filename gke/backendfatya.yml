apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/neg: '{"ingress":true}'
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"backend-app"},"name":"backend-service","namespace":"default"},"spec":{"ports":[{"port":80,"protocol":"TCP","targetPort":8080}],"selector":{"app":"backend-app"},"type":"LoadBalancer"}}
  creationTimestamp: "2025-07-28T08:37:49Z"
  finalizers:
  - service.kubernetes.io/load-balancer-cleanup
  labels:
    app: backend-app
  name: backend-service
  namespace: default
  resourceVersion: "1753691905213503019"
  uid: e01b8dd1-e803-48f2-b81a-88943d7774a9
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 34.118.239.160
  clusterIPs:
  - 34.118.239.160
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - nodePort: 31045
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: backend-app
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
    - ip: 34.50.96.242
      ipMode: VIP


---
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/neg: '{"ingress":true}'
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"frontend-service","namespace":"default"},"spec":{"ports":[{"port":80,"protocol":"TCP","targetPort":3000}],"selector":{"app":"frontend-app"},"type":"LoadBalancer"}}
  creationTimestamp: "2025-07-28T14:16:20Z"
  finalizers:
  - service.kubernetes.io/load-balancer-cleanup
  name: frontend-service
  namespace: default
  resourceVersion: "1753712214722239020"
  uid: a7d93590-95ea-4215-9475-5d6d57c9e60e
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 34.118.225.144
  clusterIPs:
  - 34.118.225.144
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - nodePort: 30178
    port: 80
    protocol: TCP
    targetPort: 3000
  selector:
    app: frontend-app
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
    - ip: 34.101.70.239
      ipMode: VIP