apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-cm0-configmap
  namespace: logging
  labels:
    io.kompose.service: logstash
data:
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
    }

    filter {
      # Hanya terapkan filter pada log dari backend-app atau backend
      if [kubernetes][labels][app] == "backend-app" or [kubernetes][labels][app] == "backend" {

        # 1) Filter Grok utama untuk memecah baris log Spring Boot
        # Pola ini lebih komprehensif untuk mencocokkan berbagai format log
        grok {
          match => {
            "message" => [
              # Pola untuk log yang lengkap
              "%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:log_level} %{NUMBER:pid} --- \\[  \\[%{DATA:appName}\\]  \\] %{JAVACLASS:logger_name} : %{GREEDYDATA:log_message}",
              # Pola untuk log tanpa appName, e.g. Hibernate
              "%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:log_level} %{NUMBER:pid} --- \\[  \\[%{DATA:thread_name}\\]  \\] %{JAVACLASS:logger_name} : %{GREEDYDATA:log_message}",
              # Pola catch-all
              "%{GREEDYDATA:log_message}"
            ]
          }
          tag_on_failure => ["_grokparsefailure_main_log"]
        }

        # 2) Tambahkan kategori log berdasarkan konten pesan
        if [log_message] =~ /Login successful/ {
          mutate {
            add_field => { "[event][category]" => "authentication" }
            add_field => { "[event][action]" => "login" }
          }
        } else if [log_message] =~ /Login attempt/ {
          mutate {
            add_field => { "[event][category]" => "authentication" }
            add_field => { "[event][action]" => "login_attempt" }
          }
        }

        # 3) Pindahkan bidang-bidang ke ECS yang benar
        mutate {
          rename => {
            "appName" => "[service][name]"
            "pid" => "[process][pid]"
            "thread_name" => "[process][thread][name]"
            "logger_name" => "[log][logger]"
            "log_level" => "[log][level]"
          }
        }

        # 4) Tentukan target index berdasarkan kategori
        if [log][level] == "ERROR" or [log][level] == "WARN" {
          mutate { add_field => { "[@metadata][target_index]" => "app-error-%{+YYYY.MM.dd}" } }
        } else if [event][action] == "login" or [event][action] == "login_attempt" {
          mutate { add_field => { "[@metadata][target_index]" => "app-login-%{+YYYY.MM.dd}" } }
        } else {
          mutate { add_field => { "[@metadata][target_index]" => "app-others-%{+YYYY.MM.dd}" } }
        }

        # 5) Parse timestamp dari logline ke bidang @timestamp
        date {
          match => ["log_timestamp", "ISO8601"]
          target => "@timestamp"
          remove_field => ["log_timestamp"]
        }
      } else {
        # Log dari pod lain akan masuk ke "app-others" secara default
        mutate { add_field => { "[@metadata][target_index]" => "app-others-%{+YYYY.MM.dd}" } }
      }
    }

    output {
      elasticsearch {
        hosts => ["http://elasticsearch:9200"]
        index => "%{[@metadata][target_index]}"
      }
      stdout { codec => rubydebug }
    }
