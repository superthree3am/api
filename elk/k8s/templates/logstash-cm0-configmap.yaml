apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-cm0-configmap
  namespace: logging
  labels:
    io.kompose.service: logstash
data:
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
    }

    filter {
      # Hanya terapkan filter pada log dari backend-app atau backend
      if [kubernetes][labels][app] == "backend-app" or [kubernetes][labels][app] == "backend" {

        # 1) Filter Grok utama untuk memecah baris log Spring Boot
        # Pola ini disesuaikan dengan format log yang Anda berikan.
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:log_timestamp}\s+%{LOGLEVEL:log_level}\s+%{NUMBER:pid}\s+---\s+\[%{DATA:appName}\]\s+\[%{DATA:thread_name}\]\s+%{JAVACLASS:logger_name}\s+:\s+%{GREEDYDATA:log_message}" }
          # Tambahkan tag fallback jika grok gagal
          tag_on_failure => ["_grokparsefailure"]
        }

        # 2) Tambahkan kategori log berdasarkan konten pesan
        if [log_message] =~ /Starting login attempt/ {
          mutate {
            add_field => { "[event][category]" => "authentication" }
            add_field => { "[event][action]" => "login_attempt" }
          }
        } else if [log_message] =~ /Login successful/ {
          mutate {
            add_field => { "[event][category]" => "authentication" }
            add_field => { "[event][action]" => "login_success" }
          }
        } else if [log_message] =~ /Login failed/ {
          mutate {
            add_field => { "[event][category]" => "authentication" }
            add_field => { "[event][action]" => "login_failure" }
          }
        }

        # 3) Pindahkan bidang-bidang ke ECS yang benar
        mutate {
          rename => {
            "appName" => "[service][name]"
            "pid" => "[process][pid]"
            "thread_name" => "[process][thread][name]"
            "logger_name" => "[log][logger]"
            "log_level" => "[log][level]"
          }
          # Hapus field yang tidak lagi diperlukan setelah di-rename
          remove_field => ["appName", "pid", "thread_name", "logger_name", "log_level"]
        }
        
        # 4) Tentukan target index berdasarkan kategori
        if [log][level] == "ERROR" or [log][level] == "WARN" {
          mutate { add_field => { "[@metadata][target_index]" => "app-error-%{+YYYY.MM.dd}" } }
        } else if [event][action] == "login_success" or [event][action] == "login_failure" or [event][action] == "login_attempt" {
          mutate { add_field => { "[@metadata][target_index]" => "app-login-%{+YYYY.MM.dd}" } }
        } else {
          mutate { add_field => { "[@metadata][target_index]" => "app-others-%{+YYYY.MM.dd}" } }
        }

        # 5) Parse timestamp dari logline ke bidang @timestamp
        date {
          match => ["log_timestamp", "ISO8601"]
          target => "@timestamp"
          remove_field => ["log_timestamp"]
        }

      } else {
        # Log dari pod lain akan masuk ke "app-others" secara default
        mutate { add_field => { "[@metadata][target_index]" => "app-others-%{+YYYY.MM.dd}" } }
      }
    }

    output {
      elasticsearch {
        hosts => ["http://elasticsearch:9200"]
        index => "%{[@metadata][target_index]}"
      }
      stdout { codec => rubydebug }
    }
